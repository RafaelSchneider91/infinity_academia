"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appPrompt = exports.projectPrompt = exports.userPrompt = exports.featuresPrompt = exports.searchApps = exports.searchProjects = void 0;
const child_process_1 = require("child_process");
const fuzzy = __importStar(require("fuzzy"));
const inquirer = __importStar(require("inquirer"));
const firebaseTools_1 = require("../firebaseTools");
const interfaces_1 = require("../interfaces");
const utils_1 = require("../utils");
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
const NEW_OPTION = '~~angularfire-new~~';
const isProject = (elem) => {
    return elem.original === undefined;
};
const isApp = (elem) => {
    return elem.original === undefined;
};
const searchProjects = (projects) => (_, input) => __awaiter(void 0, void 0, void 0, function* () {
    projects.unshift({
        projectId: NEW_OPTION,
        displayName: '[CREATE NEW PROJECT]'
    });
    return fuzzy.filter(input, projects, {
        extract(el) {
            return `${el.projectId} ${el.displayName}`;
        }
    }).map((result) => {
        let original;
        if (isProject(result)) {
            original = result;
        }
        else {
            original = result.original;
        }
        return {
            name: original.displayName,
            title: original.displayName,
            value: original.projectId
        };
    });
});
exports.searchProjects = searchProjects;
const searchApps = (apps) => (_, input) => __awaiter(void 0, void 0, void 0, function* () {
    apps.unshift({
        appId: NEW_OPTION,
        displayName: '[CREATE NEW APP]',
    });
    return fuzzy.filter(input, apps, {
        extract(el) {
            return el.displayName;
        }
    }).map((result) => {
        let original;
        if (isApp(result)) {
            original = result;
        }
        else {
            original = result.original;
        }
        return {
            name: original.displayName,
            title: original.displayName,
            value: (0, utils_1.shortAppId)(original),
        };
    });
});
exports.searchApps = searchApps;
const autocomplete = (questions) => inquirer.prompt(questions);
const featuresPrompt = () => __awaiter(void 0, void 0, void 0, function* () {
    const { features } = yield inquirer.prompt({
        type: 'checkbox',
        name: 'features',
        choices: interfaces_1.featureOptions,
        message: 'What features would you like to setup?',
        default: [],
    });
    return features;
});
exports.featuresPrompt = featuresPrompt;
const userPrompt = (options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const firebaseTools = yield (0, firebaseTools_1.getFirebaseTools)();
    let loginList = yield firebaseTools.login.list();
    if (!Array.isArray(loginList) || loginList.length === 0) {
        (0, child_process_1.spawnSync)('firebase login', { shell: true, cwd: options.projectRoot, stdio: 'inherit' });
        return yield firebaseTools.login(options);
    }
    else {
        const defaultUser = yield firebaseTools.login(options);
        const choices = loginList.map(({ user }) => ({ name: user.email, value: user }));
        const newChoice = { name: '[Login in with another account]', value: NEW_OPTION };
        const { user } = yield inquirer.prompt({
            type: 'list',
            name: 'user',
            choices: [newChoice].concat(choices),
            message: 'Which Firebase account would you like to use?',
            default: (_a = choices.find(it => it.value.email === defaultUser.email)) === null || _a === void 0 ? void 0 : _a.value,
        });
        if (user === NEW_OPTION) {
            (0, child_process_1.spawnSync)('firebase login:add', { shell: true, cwd: options.projectRoot, stdio: 'inherit' });
            loginList = yield firebaseTools.login.list();
            if (!Array.isArray(loginList)) {
                throw new Error("firebase login:list did not respond as expected");
            }
            const priorEmails = choices.map(it => it.name);
            const newLogin = loginList.find(it => !priorEmails.includes(it.user.email));
            if (!newLogin) {
                throw new Error("Did not find a new user.");
            }
            return newLogin.user;
        }
        return user;
    }
});
exports.userPrompt = userPrompt;
const projectPrompt = (defaultProject, options) => __awaiter(void 0, void 0, void 0, function* () {
    const firebaseTools = yield (0, firebaseTools_1.getFirebaseTools)();
    const projects = yield firebaseTools.projects.list(options);
    const { projectId } = yield autocomplete({
        type: 'autocomplete',
        name: 'projectId',
        source: (0, exports.searchProjects)(projects),
        message: 'Please select a project:',
        default: defaultProject,
    });
    if (projectId === NEW_OPTION) {
        const { projectId } = yield inquirer.prompt({
            type: 'input',
            name: 'projectId',
            message: `Please specify a unique project id (cannot be modified afterward) [6-30 characters]:`,
        });
        const { displayName } = yield inquirer.prompt({
            type: 'input',
            name: 'displayName',
            message: 'What would you like to call your project?',
            default: projectId,
        });
        return yield firebaseTools.projects.create(projectId, { account: options.account, displayName, nonInteractive: true });
    }
    return (projects).find(it => it.projectId === projectId);
});
exports.projectPrompt = projectPrompt;
const appPrompt = (_b, defaultAppId_1, options_1) => __awaiter(void 0, [_b, defaultAppId_1, options_1], void 0, function* ({ projectId: project }, defaultAppId, options) {
    const firebaseTools = yield (0, firebaseTools_1.getFirebaseTools)();
    const apps = yield firebaseTools.apps.list('web', Object.assign(Object.assign({}, options), { project }));
    const { appId } = yield autocomplete({
        type: 'autocomplete',
        name: 'appId',
        source: (0, exports.searchApps)(apps),
        message: 'Please select an app:',
        default: defaultAppId,
    });
    if (appId === NEW_OPTION) {
        const { displayName } = yield inquirer.prompt({
            type: 'input',
            name: 'displayName',
            message: 'What would you like to call your app?',
        });
        return yield firebaseTools.apps.create('web', displayName, Object.assign(Object.assign({}, options), { nonInteractive: true, project }));
    }
    return (apps).find(it => (0, utils_1.shortAppId)(it) === appId);
});
exports.appPrompt = appPrompt;
