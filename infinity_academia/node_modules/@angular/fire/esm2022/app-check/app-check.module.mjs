import { isPlatformServer } from '@angular/common';
import { InjectionToken, Injector, NgModule, NgZone, Optional, PLATFORM_ID, isDevMode, makeEnvironmentProviders, } from '@angular/core';
import { VERSION, ɵAPP_CHECK_PROVIDER_NAME, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵgetDefaultInstanceOf } from '@angular/fire';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import { AppCheck } from './app-check';
import * as i0 from "@angular/core";
export const PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');
export function defaultAppCheckInstanceFactory(provided, defaultApp) {
    const defaultAppCheck = ɵgetDefaultInstanceOf(ɵAPP_CHECK_PROVIDER_NAME, provided, defaultApp);
    return defaultAppCheck && new AppCheck(defaultAppCheck);
}
const LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];
const isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);
export function appCheckInstanceFactory(fn) {
    return (zone, injector, platformId) => {
        // Node should use admin token provider, browser devmode and localhost should use debug token
        if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {
            globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN ??= true;
        }
        const appCheck = zone.runOutsideAngular(() => fn(injector));
        return new AppCheck(appCheck);
    };
}
const APP_CHECK_INSTANCES_PROVIDER = {
    provide: ɵAppCheckInstances,
    deps: [
        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],
    ]
};
const DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {
    provide: AppCheck,
    useFactory: defaultAppCheckInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],
        FirebaseApp,
        PLATFORM_ID,
    ]
};
export class AppCheckModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'app-check');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: AppCheckModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.0", ngImport: i0, type: AppCheckModule });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: AppCheckModule, providers: [
            DEFAULT_APP_CHECK_INSTANCE_PROVIDER,
            APP_CHECK_INSTANCES_PROVIDER,
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: AppCheckModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,
                        APP_CHECK_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: () => [] });
export function provideAppCheck(fn, ...deps) {
    registerVersion('angularfire', VERSION.full, 'app-check');
    return makeEnvironmentProviders([
        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,
        APP_CHECK_INSTANCES_PROVIDER,
        {
            provide: PROVIDED_APP_CHECK_INSTANCES,
            useFactory: appCheckInstanceFactory(fn),
            multi: true,
            deps: [
                NgZone,
                Injector,
                PLATFORM_ID,
                ɵAngularFireSchedulers,
                FirebaseApps,
                ...deps,
            ]
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWNoZWNrLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAtY2hlY2svYXBwLWNoZWNrLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBRUwsY0FBYyxFQUNkLFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULHdCQUF3QixHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JJLE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDOztBQUV2QyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLGNBQWMsQ0FBYSxrQ0FBa0MsQ0FBQyxDQUFDO0FBRS9HLE1BQU0sVUFBVSw4QkFBOEIsQ0FBQyxRQUFzQyxFQUFFLFVBQXVCO0lBQzVHLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFtQix3QkFBd0IsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEgsT0FBTyxlQUFlLElBQUksSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUN6RCxNQUFNLFdBQVcsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRW5HLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxFQUE0QztJQUNqRixPQUFPLENBQUMsSUFBWSxFQUFFLFFBQWtCLEVBQUUsVUFBbUIsRUFBRSxFQUFFO1FBQ2hFLDZGQUE2RjtRQUM3RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ2xFLFVBQVUsQ0FBQyw2QkFBNkIsS0FBSyxJQUFJLENBQUM7UUFDcEQsQ0FBQztRQUNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM1RCxPQUFPLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLDRCQUE0QixHQUFHO0lBQ25DLE9BQU8sRUFBRSxrQkFBa0I7SUFDM0IsSUFBSSxFQUFFO1FBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDRCQUE0QixDQUFFO0tBQ2hEO0NBQ0YsQ0FBQztBQUVGLE1BQU0sbUNBQW1DLEdBQUc7SUFDMUMsT0FBTyxFQUFFLFFBQVE7SUFDakIsVUFBVSxFQUFFLDhCQUE4QjtJQUMxQyxJQUFJLEVBQUU7UUFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsNEJBQTRCLENBQUU7UUFDL0MsV0FBVztRQUNYLFdBQVc7S0FDWjtDQUNGLENBQUM7QUFRRixNQUFNLE9BQU8sY0FBYztJQUN6QjtRQUNFLGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM1RCxDQUFDO3VHQUhVLGNBQWM7d0dBQWQsY0FBYzt3R0FBZCxjQUFjLGFBTGQ7WUFDVCxtQ0FBbUM7WUFDbkMsNEJBQTRCO1NBQzdCOzsyRkFFVSxjQUFjO2tCQU4xQixRQUFRO21CQUFDO29CQUNSLFNBQVMsRUFBRTt3QkFDVCxtQ0FBbUM7d0JBQ25DLDRCQUE0QjtxQkFDN0I7aUJBQ0Y7O0FBT0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxFQUE0QyxFQUFFLEdBQUcsSUFBVztJQUMxRixlQUFlLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDMUQsT0FBTyx3QkFBd0IsQ0FBQztRQUM5QixtQ0FBbUM7UUFDbkMsNEJBQTRCO1FBQzVCO1lBQ0UsT0FBTyxFQUFFLDRCQUE0QjtZQUNyQyxVQUFVLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFO2dCQUNKLE1BQU07Z0JBQ04sUUFBUTtnQkFDUixXQUFXO2dCQUNYLHNCQUFzQjtnQkFDdEIsWUFBWTtnQkFDWixHQUFHLElBQUk7YUFDUjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIEluamVjdGlvblRva2VuLFxuICBJbmplY3RvcixcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgT3B0aW9uYWwsXG4gIFBMQVRGT1JNX0lELFxuICBpc0Rldk1vZGUsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWRVJTSU9OLCDJtUFQUF9DSEVDS19QUk9WSURFUl9OQU1FLCDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycywgybVBcHBDaGVja0luc3RhbmNlcywgybVnZXREZWZhdWx0SW5zdGFuY2VPZiB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAsIEZpcmViYXNlQXBwcyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXBwJztcbmltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBBcHBDaGVjayBhcyBGaXJlYmFzZUFwcENoZWNrIH0gZnJvbSAnZmlyZWJhc2UvYXBwLWNoZWNrJztcbmltcG9ydCB7IEFwcENoZWNrIH0gZnJvbSAnLi9hcHAtY2hlY2snO1xuXG5leHBvcnQgY29uc3QgUFJPVklERURfQVBQX0NIRUNLX0lOU1RBTkNFUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBcHBDaGVja1tdPignYW5ndWxhcmZpcmUyLmFwcC1jaGVjay1pbnN0YW5jZXMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRBcHBDaGVja0luc3RhbmNlRmFjdG9yeShwcm92aWRlZDogRmlyZWJhc2VBcHBDaGVja1tdfHVuZGVmaW5lZCwgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHApIHtcbiAgY29uc3QgZGVmYXVsdEFwcENoZWNrID0gybVnZXREZWZhdWx0SW5zdGFuY2VPZjxGaXJlYmFzZUFwcENoZWNrPijJtUFQUF9DSEVDS19QUk9WSURFUl9OQU1FLCBwcm92aWRlZCwgZGVmYXVsdEFwcCk7XG4gIHJldHVybiBkZWZhdWx0QXBwQ2hlY2sgJiYgbmV3IEFwcENoZWNrKGRlZmF1bHRBcHBDaGVjayk7XG59XG5cbmNvbnN0IExPQ0FMSE9TVFMgPSBbJ2xvY2FsaG9zdCcsICcwLjAuMC4wJywgJzEyNy4wLjAuMSddO1xuY29uc3QgaXNMb2NhbGhvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBMT0NBTEhPU1RTLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBDaGVja0luc3RhbmNlRmFjdG9yeShmbjogKGluamVjdG9yOiBJbmplY3RvcikgPT4gRmlyZWJhc2VBcHBDaGVjaykge1xuICAgcmV0dXJuICh6b25lOiBOZ1pvbmUsIGluamVjdG9yOiBJbmplY3RvciwgcGxhdGZvcm1JZDogdW5rbm93bikgPT4ge1xuICAgIC8vIE5vZGUgc2hvdWxkIHVzZSBhZG1pbiB0b2tlbiBwcm92aWRlciwgYnJvd3NlciBkZXZtb2RlIGFuZCBsb2NhbGhvc3Qgc2hvdWxkIHVzZSBkZWJ1ZyB0b2tlblxuICAgIGlmICghaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKSAmJiAoaXNEZXZNb2RlKCkgfHwgaXNMb2NhbGhvc3QpKSB7XG4gICAgICBnbG9iYWxUaGlzLkZJUkVCQVNFX0FQUENIRUNLX0RFQlVHX1RPS0VOID8/PSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBhcHBDaGVjayA9IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZm4oaW5qZWN0b3IpKTtcbiAgICByZXR1cm4gbmV3IEFwcENoZWNrKGFwcENoZWNrKTtcbiAgfTtcbn1cblxuY29uc3QgQVBQX0NIRUNLX0lOU1RBTkNFU19QUk9WSURFUiA9IHtcbiAgcHJvdmlkZTogybVBcHBDaGVja0luc3RhbmNlcyxcbiAgZGVwczogW1xuICAgIFtuZXcgT3B0aW9uYWwoKSwgUFJPVklERURfQVBQX0NIRUNLX0lOU1RBTkNFUyBdLFxuICBdXG59O1xuXG5jb25zdCBERUZBVUxUX0FQUF9DSEVDS19JTlNUQU5DRV9QUk9WSURFUiA9IHtcbiAgcHJvdmlkZTogQXBwQ2hlY2ssXG4gIHVzZUZhY3Rvcnk6IGRlZmF1bHRBcHBDaGVja0luc3RhbmNlRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIFtuZXcgT3B0aW9uYWwoKSwgUFJPVklERURfQVBQX0NIRUNLX0lOU1RBTkNFUyBdLFxuICAgIEZpcmViYXNlQXBwLFxuICAgIFBMQVRGT1JNX0lELFxuICBdXG59O1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtcbiAgICBERUZBVUxUX0FQUF9DSEVDS19JTlNUQU5DRV9QUk9WSURFUixcbiAgICBBUFBfQ0hFQ0tfSU5TVEFOQ0VTX1BST1ZJREVSLFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEFwcENoZWNrTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgcmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyZmlyZScsIFZFUlNJT04uZnVsbCwgJ2FwcC1jaGVjaycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQXBwQ2hlY2soZm46IChpbmplY3RvcjogSW5qZWN0b3IpID0+IEZpcmViYXNlQXBwQ2hlY2ssIC4uLmRlcHM6IGFueVtdKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAnYXBwLWNoZWNrJyk7XG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoW1xuICAgIERFRkFVTFRfQVBQX0NIRUNLX0lOU1RBTkNFX1BST1ZJREVSLFxuICAgIEFQUF9DSEVDS19JTlNUQU5DRVNfUFJPVklERVIsXG4gICAge1xuICAgICAgcHJvdmlkZTogUFJPVklERURfQVBQX0NIRUNLX0lOU1RBTkNFUyxcbiAgICAgIHVzZUZhY3Rvcnk6IGFwcENoZWNrSW5zdGFuY2VGYWN0b3J5KGZuKSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW1xuICAgICAgICBOZ1pvbmUsXG4gICAgICAgIEluamVjdG9yLFxuICAgICAgICBQTEFURk9STV9JRCxcbiAgICAgICAgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsXG4gICAgICAgIEZpcmViYXNlQXBwcyxcbiAgICAgICAgLi4uZGVwcyxcbiAgICAgIF1cbiAgICB9XG4gIF0pO1xufVxuIl19