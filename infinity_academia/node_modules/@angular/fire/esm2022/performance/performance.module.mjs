import { isPlatformBrowser } from '@angular/common';
import { InjectionToken, Injector, NgModule, NgZone, Optional, PLATFORM_ID, makeEnvironmentProviders, } from '@angular/core';
import { VERSION, ɵAngularFireSchedulers, ɵgetDefaultInstanceOf } from '@angular/fire';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import { PERFORMANCE_PROVIDER_NAME, Performance, PerformanceInstances } from './performance';
import * as i0 from "@angular/core";
export const PROVIDED_PERFORMANCE_INSTANCES = new InjectionToken('angularfire2.performance-instances');
export function defaultPerformanceInstanceFactory(provided, defaultApp, 
// eslint-disable-next-line @typescript-eslint/ban-types
platform) {
    if (!isPlatformBrowser(platform)) {
        return null;
    }
    const defaultPerformance = ɵgetDefaultInstanceOf(PERFORMANCE_PROVIDER_NAME, provided, defaultApp);
    return defaultPerformance && new Performance(defaultPerformance);
}
export function performanceInstanceFactory(fn) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return (zone, platform, injector) => {
        if (!isPlatformBrowser(platform)) {
            return null;
        }
        const performance = zone.runOutsideAngular(() => fn(injector));
        return new Performance(performance);
    };
}
const PERFORMANCE_INSTANCES_PROVIDER = {
    provide: PerformanceInstances,
    deps: [
        [new Optional(), PROVIDED_PERFORMANCE_INSTANCES],
    ]
};
const DEFAULT_PERFORMANCE_INSTANCE_PROVIDER = {
    provide: Performance,
    useFactory: defaultPerformanceInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_PERFORMANCE_INSTANCES],
        FirebaseApp,
        PLATFORM_ID,
    ]
};
export class PerformanceModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'perf');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: PerformanceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.0", ngImport: i0, type: PerformanceModule });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: PerformanceModule, providers: [
            DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
            PERFORMANCE_INSTANCES_PROVIDER,
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: PerformanceModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
                        PERFORMANCE_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: () => [] });
export function providePerformance(fn, ...deps) {
    registerVersion('angularfire', VERSION.full, 'perf');
    return makeEnvironmentProviders([
        DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
        PERFORMANCE_INSTANCES_PROVIDER,
        {
            provide: PROVIDED_PERFORMANCE_INSTANCES,
            useFactory: performanceInstanceFactory(fn),
            multi: true,
            deps: [
                NgZone,
                PLATFORM_ID,
                Injector,
                ɵAngularFireSchedulers,
                FirebaseApps,
                ...deps,
            ]
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BlcmZvcm1hbmNlL3BlcmZvcm1hbmNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBRUwsY0FBYyxFQUNkLFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsd0JBQXdCLEdBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRS9DLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTdGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLElBQUksY0FBYyxDQUFnQixvQ0FBb0MsQ0FBQyxDQUFDO0FBRXRILE1BQU0sVUFBVSxpQ0FBaUMsQ0FDL0MsUUFBeUMsRUFDekMsVUFBdUI7QUFDdkIsd0RBQXdEO0FBQ3hELFFBQWdCO0lBRWhCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQUMsT0FBTyxJQUFJLENBQUM7SUFBQyxDQUFDO0lBQ2xELE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQXNCLHlCQUF5QixFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN2SCxPQUFPLGtCQUFrQixJQUFJLElBQUksV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxFQUErQztJQUN4Rix3REFBd0Q7SUFDeEQsT0FBTyxDQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLFFBQWtCLEVBQUUsRUFBRTtRQUM1RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUFDLE9BQU8sSUFBSSxDQUFDO1FBQUMsQ0FBQztRQUNsRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0QsT0FBTyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSw4QkFBOEIsR0FBRztJQUNyQyxPQUFPLEVBQUUsb0JBQW9CO0lBQzdCLElBQUksRUFBRTtRQUNKLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSw4QkFBOEIsQ0FBRTtLQUNsRDtDQUNGLENBQUM7QUFFRixNQUFNLHFDQUFxQyxHQUFHO0lBQzVDLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLFVBQVUsRUFBRSxpQ0FBaUM7SUFDN0MsSUFBSSxFQUFFO1FBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDhCQUE4QixDQUFFO1FBQ2pELFdBQVc7UUFDWCxXQUFXO0tBQ1o7Q0FDRixDQUFDO0FBUUYsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QjtRQUNFLGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO3VHQUhVLGlCQUFpQjt3R0FBakIsaUJBQWlCO3dHQUFqQixpQkFBaUIsYUFMakI7WUFDVCxxQ0FBcUM7WUFDckMsOEJBQThCO1NBQy9COzsyRkFFVSxpQkFBaUI7a0JBTjdCLFFBQVE7bUJBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULHFDQUFxQzt3QkFDckMsOEJBQThCO3FCQUMvQjtpQkFDRjs7QUFPRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLEVBQStDLEVBQUUsR0FBRyxJQUFXO0lBRS9ELGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVyRCxPQUFPLHdCQUF3QixDQUFDO1FBQzlCLHFDQUFxQztRQUNyQyw4QkFBOEI7UUFDOUI7WUFDRSxPQUFPLEVBQUUsOEJBQThCO1lBQ3ZDLFVBQVUsRUFBRSwwQkFBMEIsQ0FBQyxFQUFFLENBQUM7WUFDMUMsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUU7Z0JBQ0osTUFBTTtnQkFDTixXQUFXO2dCQUNYLFFBQVE7Z0JBQ1Isc0JBQXNCO2dCQUN0QixZQUFZO2dCQUNaLEdBQUcsSUFBSTthQUNSO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIEluamVjdGlvblRva2VuLFxuICBJbmplY3RvcixcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgT3B0aW9uYWwsXG4gIFBMQVRGT1JNX0lELFxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVkVSU0lPTiwgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsIMm1Z2V0RGVmYXVsdEluc3RhbmNlT2YgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IEZpcmViYXNlQXBwLCBGaXJlYmFzZUFwcHMgfSBmcm9tICdAYW5ndWxhci9maXJlL2FwcCc7XG5pbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgRmlyZWJhc2VQZXJmb3JtYW5jZSB9IGZyb20gJ2ZpcmViYXNlL3BlcmZvcm1hbmNlJztcbmltcG9ydCB7IFBFUkZPUk1BTkNFX1BST1ZJREVSX05BTUUsIFBlcmZvcm1hbmNlLCBQZXJmb3JtYW5jZUluc3RhbmNlcyB9IGZyb20gJy4vcGVyZm9ybWFuY2UnO1xuXG5leHBvcnQgY29uc3QgUFJPVklERURfUEVSRk9STUFOQ0VfSU5TVEFOQ0VTID0gbmV3IEluamVjdGlvblRva2VuPFBlcmZvcm1hbmNlW10+KCdhbmd1bGFyZmlyZTIucGVyZm9ybWFuY2UtaW5zdGFuY2VzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UGVyZm9ybWFuY2VJbnN0YW5jZUZhY3RvcnkoXG4gIHByb3ZpZGVkOiBGaXJlYmFzZVBlcmZvcm1hbmNlW118dW5kZWZpbmVkLFxuICBkZWZhdWx0QXBwOiBGaXJlYmFzZUFwcCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgcGxhdGZvcm06IE9iamVjdFxuKSB7XG4gIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm0pKSB7IHJldHVybiBudWxsOyB9XG4gIGNvbnN0IGRlZmF1bHRQZXJmb3JtYW5jZSA9IMm1Z2V0RGVmYXVsdEluc3RhbmNlT2Y8RmlyZWJhc2VQZXJmb3JtYW5jZT4oUEVSRk9STUFOQ0VfUFJPVklERVJfTkFNRSwgcHJvdmlkZWQsIGRlZmF1bHRBcHApO1xuICByZXR1cm4gZGVmYXVsdFBlcmZvcm1hbmNlICYmIG5ldyBQZXJmb3JtYW5jZShkZWZhdWx0UGVyZm9ybWFuY2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybWFuY2VJbnN0YW5jZUZhY3RvcnkoZm46IChpbmplY3RvcjogSW5qZWN0b3IpID0+IEZpcmViYXNlUGVyZm9ybWFuY2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgcmV0dXJuICh6b25lOiBOZ1pvbmUsIHBsYXRmb3JtOiBPYmplY3QsIGluamVjdG9yOiBJbmplY3RvcikgPT4ge1xuICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm0pKSB7IHJldHVybiBudWxsOyB9XG4gICAgY29uc3QgcGVyZm9ybWFuY2UgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGZuKGluamVjdG9yKSk7XG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZShwZXJmb3JtYW5jZSk7XG4gIH07XG59XG5cbmNvbnN0IFBFUkZPUk1BTkNFX0lOU1RBTkNFU19QUk9WSURFUiA9IHtcbiAgcHJvdmlkZTogUGVyZm9ybWFuY2VJbnN0YW5jZXMsXG4gIGRlcHM6IFtcbiAgICBbbmV3IE9wdGlvbmFsKCksIFBST1ZJREVEX1BFUkZPUk1BTkNFX0lOU1RBTkNFUyBdLFxuICBdXG59O1xuXG5jb25zdCBERUZBVUxUX1BFUkZPUk1BTkNFX0lOU1RBTkNFX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBQZXJmb3JtYW5jZSxcbiAgdXNlRmFjdG9yeTogZGVmYXVsdFBlcmZvcm1hbmNlSW5zdGFuY2VGYWN0b3J5LFxuICBkZXBzOiBbXG4gICAgW25ldyBPcHRpb25hbCgpLCBQUk9WSURFRF9QRVJGT1JNQU5DRV9JTlNUQU5DRVMgXSxcbiAgICBGaXJlYmFzZUFwcCxcbiAgICBQTEFURk9STV9JRCxcbiAgXVxufTtcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgREVGQVVMVF9QRVJGT1JNQU5DRV9JTlNUQU5DRV9QUk9WSURFUixcbiAgICBQRVJGT1JNQU5DRV9JTlNUQU5DRVNfUFJPVklERVIsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUGVyZm9ybWFuY2VNb2R1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAncGVyZicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUGVyZm9ybWFuY2UoXG4gIGZuOiAoaW5qZWN0b3I6IEluamVjdG9yKSA9PiBGaXJlYmFzZVBlcmZvcm1hbmNlLCAuLi5kZXBzOiBhbnlbXVxuKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAncGVyZicpO1xuXG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoW1xuICAgIERFRkFVTFRfUEVSRk9STUFOQ0VfSU5TVEFOQ0VfUFJPVklERVIsXG4gICAgUEVSRk9STUFOQ0VfSU5TVEFOQ0VTX1BST1ZJREVSLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFBST1ZJREVEX1BFUkZPUk1BTkNFX0lOU1RBTkNFUyxcbiAgICAgIHVzZUZhY3Rvcnk6IHBlcmZvcm1hbmNlSW5zdGFuY2VGYWN0b3J5KGZuKSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW1xuICAgICAgICBOZ1pvbmUsXG4gICAgICAgIFBMQVRGT1JNX0lELFxuICAgICAgICBJbmplY3RvcixcbiAgICAgICAgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsXG4gICAgICAgIEZpcmViYXNlQXBwcyxcbiAgICAgICAgLi4uZGVwcyxcbiAgICAgIF1cbiAgICB9XG4gIF0pO1xufVxuIl19