// DEBUG quick debugger function for inline logging that typescript doesn't complain about
//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a
//       verbose mode for AngularFire in a future release that uses something like this in multiple places
//       usage: () => log('something') || returnValue
// const log = (...args: any[]): false => { console.log(...args); return false }
// The problem here are things like ngOnDestroy are missing, then triggering the service
// rather than dig too far; I'm capturing these as I go.
const noopFunctions = ['ngOnDestroy'];
// INVESTIGATE should we make the Proxy revokable and do some cleanup?
//             right now it's fairly simple but I'm sure this will grow in complexity
export const ɵlazySDKProxy = (klass, observable, zone, options = {}) => {
    return new Proxy(klass, {
        get: (_, name) => zone.runOutsideAngular(() => {
            if (klass[name]) {
                if (options?.spy?.get) {
                    options.spy.get(name, klass[name]);
                }
                return klass[name];
            }
            if (noopFunctions.indexOf(name) > -1) {
                return () => undefined;
            }
            const promise = observable.toPromise().then(mod => {
                const ret = mod?.[name];
                // TODO move to proper type guards
                if (typeof ret === 'function') {
                    return ret.bind(mod);
                }
                else if (ret?.then) {
                    return ret.then((res) => zone.run(() => res));
                }
                else {
                    return zone.run(() => ret);
                }
            });
            // recurse the proxy
            return new Proxy(() => undefined, {
                get: (_, name) => promise[name],
                // TODO handle callbacks as transparently as I can
                apply: (self, _, args) => promise.then(it => {
                    const res = it?.(...args);
                    if (options?.spy?.apply) {
                        options.spy.apply(name, args, res);
                    }
                    return res;
                })
            });
        })
    });
};
export const ɵapplyMixins = (derivedCtor, constructors) => {
    constructors.forEach((baseCtor) => {
        Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach((name) => {
            Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGF0L3Byb3h5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQSwwRkFBMEY7QUFDMUYscUdBQXFHO0FBQ3JHLDBHQUEwRztBQUMxRyxxREFBcUQ7QUFDckQsZ0ZBQWdGO0FBRWhGLHdGQUF3RjtBQUN4Rix3REFBd0Q7QUFDeEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV0QyxzRUFBc0U7QUFDdEUscUZBQXFGO0FBQ3JGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBRSxVQUEyQixFQUFFLElBQVksRUFBRSxVQUtqRixFQUFFLEVBQUUsRUFBRTtJQUNSLE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1FBQ3RCLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDcEQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO29CQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLENBQUM7Z0JBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsQ0FBQztZQUNELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUN6QixDQUFDO1lBQ0QsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLGtDQUFrQztnQkFDbEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxVQUFVLEVBQUUsQ0FBQztvQkFDOUIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QixDQUFDO3FCQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO29CQUNyQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckQsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0IsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsb0JBQW9CO1lBQ3BCLE9BQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFO2dCQUM5QixHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUMvQixrREFBa0Q7Z0JBQ2xELEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO29CQUMxQyxNQUFNLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUMxQixJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7d0JBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3JDLENBQUM7b0JBQ0QsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDO2FBQ0gsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsV0FBZ0IsRUFBRSxZQUFtQixFQUFFLEVBQUU7SUFDcEUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzFFLE1BQU0sQ0FBQyxjQUFjLENBQ25CLFdBQVcsQ0FBQyxTQUFTLEVBQ3JCLElBQUksRUFDSixNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQ3RFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbnR5cGUgTXlGdW5jdGlvbiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xudHlwZSBGdW5jdGlvblByb3BlcnR5TmFtZXM8VD4gPSB7IFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgTXlGdW5jdGlvbiA/IEsgOiBuZXZlciB9W2tleW9mIFRdO1xudHlwZSBSZXR1cm5UeXBlT3JOZXZlcjxUPiA9IFQgZXh0ZW5kcyBNeUZ1bmN0aW9uID8gUmV0dXJuVHlwZTxUPiA6IG5ldmVyO1xudHlwZSBQYXJhbWV0ZXJzT3JOZXZlcjxUPiA9IFQgZXh0ZW5kcyBNeUZ1bmN0aW9uID8gUGFyYW1ldGVyczxUPiA6IG5ldmVyO1xudHlwZSBQcm9taXNlUmV0dXJuaW5nRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFQ+ID0ge1xuICBbSyBpbiBGdW5jdGlvblByb3BlcnR5TmFtZXM8VD5dOiBSZXR1cm5UeXBlT3JOZXZlcjxUW0tdPiBleHRlbmRzIFByb21pc2U8YW55PiA/IEsgOiBuZXZlclxufVtGdW5jdGlvblByb3BlcnR5TmFtZXM8VD5dO1xudHlwZSBOb25Qcm9taXNlUmV0dXJuaW5nRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFQ+ID0ge1xuICBbSyBpbiBGdW5jdGlvblByb3BlcnR5TmFtZXM8VD5dOiBSZXR1cm5UeXBlT3JOZXZlcjxUW0tdPiBleHRlbmRzIFByb21pc2U8YW55PiA/IG5ldmVyIDogS1xufVtGdW5jdGlvblByb3BlcnR5TmFtZXM8VD5dO1xudHlwZSBOb25GdW5jdGlvblByb3BlcnR5TmFtZXM8VD4gPSB7IFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgTXlGdW5jdGlvbiA/IG5ldmVyIDogSyB9W2tleW9mIFRdO1xuXG5leHBvcnQgdHlwZSDJtVByb21pc2VQcm94eTxUPiA9IHsgW0sgaW4gTm9uRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFQ+XTogUHJvbWlzZTxUW0tdPiB9ICZcbiAgeyBbSyBpbiBOb25Qcm9taXNlUmV0dXJuaW5nRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFQ+XTogKC4uLmFyZ3M6IFBhcmFtZXRlcnNPck5ldmVyPFRbS10+KSA9PiBQcm9taXNlPFJldHVyblR5cGVPck5ldmVyPFRbS10+PiB9ICZcbiAgeyBbSyBpbiBQcm9taXNlUmV0dXJuaW5nRnVuY3Rpb25Qcm9wZXJ0eU5hbWVzPFQ+XTogVFtLXSB9O1xuXG4vLyBERUJVRyBxdWljayBkZWJ1Z2dlciBmdW5jdGlvbiBmb3IgaW5saW5lIGxvZ2dpbmcgdGhhdCB0eXBlc2NyaXB0IGRvZXNuJ3QgY29tcGxhaW4gYWJvdXRcbi8vICAgICAgIHdyb3RlIGl0IGZvciBkZWJ1Z2dpbmcgdGhlIMm1bGF6eVNES1Byb3h5LCBjb21tZW50aW5nIG91dCBmb3Igbm93OyBzaG91bGQgY29uc2lkZXIgZXhwb3NpbmcgYVxuLy8gICAgICAgdmVyYm9zZSBtb2RlIGZvciBBbmd1bGFyRmlyZSBpbiBhIGZ1dHVyZSByZWxlYXNlIHRoYXQgdXNlcyBzb21ldGhpbmcgbGlrZSB0aGlzIGluIG11bHRpcGxlIHBsYWNlc1xuLy8gICAgICAgdXNhZ2U6ICgpID0+IGxvZygnc29tZXRoaW5nJykgfHwgcmV0dXJuVmFsdWVcbi8vIGNvbnN0IGxvZyA9ICguLi5hcmdzOiBhbnlbXSk6IGZhbHNlID0+IHsgY29uc29sZS5sb2coLi4uYXJncyk7IHJldHVybiBmYWxzZSB9XG5cbi8vIFRoZSBwcm9ibGVtIGhlcmUgYXJlIHRoaW5ncyBsaWtlIG5nT25EZXN0cm95IGFyZSBtaXNzaW5nLCB0aGVuIHRyaWdnZXJpbmcgdGhlIHNlcnZpY2Vcbi8vIHJhdGhlciB0aGFuIGRpZyB0b28gZmFyOyBJJ20gY2FwdHVyaW5nIHRoZXNlIGFzIEkgZ28uXG5jb25zdCBub29wRnVuY3Rpb25zID0gWyduZ09uRGVzdHJveSddO1xuXG4vLyBJTlZFU1RJR0FURSBzaG91bGQgd2UgbWFrZSB0aGUgUHJveHkgcmV2b2thYmxlIGFuZCBkbyBzb21lIGNsZWFudXA/XG4vLyAgICAgICAgICAgICByaWdodCBub3cgaXQncyBmYWlybHkgc2ltcGxlIGJ1dCBJJ20gc3VyZSB0aGlzIHdpbGwgZ3JvdyBpbiBjb21wbGV4aXR5XG5leHBvcnQgY29uc3QgybVsYXp5U0RLUHJveHkgPSAoa2xhc3M6IGFueSwgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+LCB6b25lOiBOZ1pvbmUsIG9wdGlvbnM6IHtcbiAgc3B5Pzoge1xuICAgIGdldD86ICgobmFtZTogc3RyaW5nLCBpdDogYW55KSA9PiB2b2lkKSxcbiAgICBhcHBseT86ICgobmFtZTogc3RyaW5nLCBhcmdzOiBhbnlbXSwgaXQ6IGFueSkgPT4gdm9pZClcbiAgfVxufSA9IHt9KSA9PiB7XG4gIHJldHVybiBuZXcgUHJveHkoa2xhc3MsIHtcbiAgICBnZXQ6IChfLCBuYW1lOiBzdHJpbmcpID0+IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKGtsYXNzW25hbWVdKSB7XG4gICAgICAgIGlmIChvcHRpb25zPy5zcHk/LmdldCkge1xuICAgICAgICAgIG9wdGlvbnMuc3B5LmdldChuYW1lLCBrbGFzc1tuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtsYXNzW25hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKG5vb3BGdW5jdGlvbnMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9taXNlID0gb2JzZXJ2YWJsZS50b1Byb21pc2UoKS50aGVuKG1vZCA9PiB7XG4gICAgICAgIGNvbnN0IHJldCA9IG1vZD8uW25hbWVdO1xuICAgICAgICAvLyBUT0RPIG1vdmUgdG8gcHJvcGVyIHR5cGUgZ3VhcmRzXG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHJldC5iaW5kKG1vZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmV0Py50aGVuKSB7XG4gICAgICAgICAgcmV0dXJuIHJldC50aGVuKChyZXM6IGFueSkgPT4gem9uZS5ydW4oKCkgPT4gcmVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHpvbmUucnVuKCgpID0+IHJldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gcmVjdXJzZSB0aGUgcHJveHlcbiAgICAgIHJldHVybiBuZXcgUHJveHkoKCkgPT4gdW5kZWZpbmVkLCB7XG4gICAgICAgICAgZ2V0OiAoXywgbmFtZSkgPT4gcHJvbWlzZVtuYW1lXSxcbiAgICAgICAgICAvLyBUT0RPIGhhbmRsZSBjYWxsYmFja3MgYXMgdHJhbnNwYXJlbnRseSBhcyBJIGNhblxuICAgICAgICAgIGFwcGx5OiAoc2VsZiwgXywgYXJncykgPT4gcHJvbWlzZS50aGVuKGl0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGl0Py4oLi4uYXJncyk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucz8uc3B5Py5hcHBseSkge1xuICAgICAgICAgICAgICBvcHRpb25zLnNweS5hcHBseShuYW1lLCBhcmdzLCByZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IMm1YXBwbHlNaXhpbnMgPSAoZGVyaXZlZEN0b3I6IGFueSwgY29uc3RydWN0b3JzOiBhbnlbXSkgPT4ge1xuICBjb25zdHJ1Y3RvcnMuZm9yRWFjaCgoYmFzZUN0b3IpID0+IHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlQ3Rvci5wcm90b3R5cGUgfHwgYmFzZUN0b3IpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgZGVyaXZlZEN0b3IucHJvdG90eXBlLFxuICAgICAgICBuYW1lLFxuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2VDdG9yLnByb3RvdHlwZSB8fCBiYXNlQ3RvciwgbmFtZSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufTtcbiJdfQ==